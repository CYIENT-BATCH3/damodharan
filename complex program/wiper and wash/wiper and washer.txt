// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include<xc.h>
#define _XTAL_FREQ 20000000
char data_buf[11];
void System_init();
void can_rx_init();
void set_baudrate();
void can_rx_read();
void set_mode();
void get_mode();
void mask();
void filter();
void CAN_TX(char data);
//void CAN_TX1(char data1);
unsigned char RTX;
unsigned char TTX;
unsigned char data;

int main()
{
    System_init();
    can_rx_init();
    set_baudrate();
    mask();
    filter();
    while(1)
    {
        //RD0=1;
        if(data_buf[0]==0x44 && data_buf[1]==0x20)
        {
           // RD0=1;
            if((data_buf[6]&0x0f)==0x04)
            {
                PORTDbits.RD0=1;
                RTX=0x04;
                
            }
            else if((data_buf[6]&0x0f)==0x08)
            {
                PORTDbits.RD0=1;
                RTX=0x08;
            }
            else if((data_buf[6]&0x0f)==0x0c)
            {
                PORTDbits.RD0=1;
                RTX=0x0c;
            }
            else 
            {
                RTX=0x00;
            }
            if((data_buf[6]&0xf0)==0x40)
            {
                PORTDbits.RD0=1;
                TTX=0x40;
            }
            else if((data_buf[6]&0xf0)==0x80)
            {
                PORTDbits.RD0=1;
                TTX=0x80;
            }
            else if((data_buf[6]&0xf0)==0xc0)
            {
                PORTDbits.RD0=1;
                TTX=0xc0;
            }
            else
            {
                PORTDbits.RD0=1;
                TTX=0x00;
            }
            data=RTX|TTX; 
        }
        CAN_TX(data);
        __delay_ms(1000);
        
        
    }
}
void __interrupt() ISR1()
{
    
    if(RX0IF)
    {
        RX0IF = 0;
        PORTDbits.RD0 = 1;
        can_rx_read();
    }
}
void System_init()
{
    GIE = 1;          //enable the global 
    PEIE = 1;         //enable pheripherial
}
void can_rx_init()
{
    TRISBbits.RB2 = 0;     //transmitting pin in MCU  Tx
    TRISBbits.RB3 = 1;     //receiving pin in MCU Rx
    TRISDbits.RD0 = 0;
    PORTDbits.RD4 = 0;
    PORTDbits.RD0 = 0;
    IPR3bits.RXB0IP = 1;
    PIE3bits.RXB0IE = 1;
}
void set_mode()
{
    set_baudrate();
}
void get_mode()
{
    CANCON = 0x0E;
}
void set_baudrate()
{
    CANCON = 0x80;      //setting the configuration mode to set baud rate
    while(CANSTAT != 0x80);      //setting the status register
    BRGCON1 = 0XC1;        //r
    BRGCON2 = 0XAE;        
    BRGCON3 = 0X45;
    CIOCON = 0X20;
    CANCON = 0x08;
}
void mask()
{
    RXM0SIDH = 0x00;
    RXM0SIDL = 0x00;
}
void filter()
{
    RXF0SIDH = 0x00;
    RXF0SIDL = 0x00;
}

void can_rx_read()
{
           CANCON = 0x0E;
           data_buf[0] = RXB0SIDH;  
           data_buf[1] = RXB0SIDL;
           data_buf[2] = RXB0DLC ;
           data_buf[3] = RXB0D0 ;
           data_buf[4] = RXB0D1 ;
           data_buf[5] = RXB0D2 ;
           data_buf[6] = RXB0D3 ;
           data_buf[7] = RXB0D4 ;
           data_buf[8] = RXB0D5 ;
           data_buf[9] = RXB0D6 ;
           data_buf[10] = RXB0D7 ;     
           RXB0CONbits.RXB0FUL = 0;  
}
void CAN_TX(char data)
{
    
     CANCON = 0x08;
     CIOCON = 0X20;
     TXB0SIDH = 0X22;                   //Transmitting to  address 9F 
     TXB0SIDL = 0X40;
     TXB0DLC = 0X08;
     TXB0D0  = 0X00;
     TXB0D1  = 0X00;
     TXB0D2  = 0X00;
     TXB0D3  = data;
     TXB0D4  = 0X00;
     TXB0D5  = 0X00;
     TXB0D6  = 0X00;
     TXB0D7  = 0X00;
     TXB0CON = 0X08;  
}
/*void CAN_TX1(char data1)
{
     CANCON = 0x08;
     TXB0SIDH = 0X22;                   //Transmitting to  address 9F 
     TXB0SIDL = 0X40;
     TXB0DLC = 0X08;
     TXB0D0  = 0X00;
     TXB0D1  = 0X00;
     TXB0D2  = 0X00;
     TXB0D3  = data1;
     TXB0D4  = 0X00;
     TXB0D5  = 0X00;
     TXB0D6  = 0X00;
     TXB0D7  = 0X00;
     TXB0CON = 0X08;
     CANCON = 0X08;   
}*/


