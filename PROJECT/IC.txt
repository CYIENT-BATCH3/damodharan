// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include<xc.h>                      //header file
#define _XTAL_FREQ 20000000          // this frequency is used for delay purpose
void System_init();          //Initialize GIE and PEIE interrupts in system initialization
void CAN_init();             //we initialize Tx and Rx of CAN bus
void Set_baudrate();        //declaring function to set baud rate of 205kbps
void IC_TX();              //declaring function to transmit msg id of 0x40 to give acknowledge that IC ECU ready to receive data
void CAN_write2();            
void can_read();          //declaring function to receive data from occupant classification ECU
void can_read_2();        //declaring function to receive data from cruise control ECU
void set_mode();          //declaring function to set ECU to configuration mode or normal mode
void get_mode();         //declaring function to get mode 
void mask();             //declaring function to set mask
void filter();          //declaring function to set filter
void EEPROM_Write (int, char);     //function to write the received data from oc ecu to EEPROM
void TRIP_RESET();     //function to reset the last status of OC ECU from EEPROM after pressing the switch-1
void EEPROM_RESET();
unsigned char data_buf[11];
unsigned char data_buf_2[11];
void TRIP_RESET();
unsigned char var1;
void CC_Write(int, char);
unsigned char var2;
void CC_RESET();
void CC_TRIP_RESET();
int main()                                  // main start
{
    System_init();         //calling system_init function
    CAN_init();           //calling can_init function
    Set_baudrate();        //calling set_baudrate function
    mask();                 //calling mask function
    filter();               // calling filter function
    while(1)                // while loop for continue data sending
    {
         IC_TX();           //calling instrument cluster function 
          __delay_ms(1000);         // giving delay of 1 second 
        if((data_buf[0] == 0x44) && (data_buf[1] == 0x00)) //|| ((data_buf_2[0] == 0x67) && (data_buf_2[1] == 0xE0)))    // checking message ID of occupant classification 
        {
                                             //LED for checking the
            if((data_buf[3] == 0x01) || (data_buf[3] == 0x02) || (data_buf[3] == 0x03))                     // checking the occupant status 
            {
                PORTDbits.RD3 = 1;      //  led indicates all seats are occupied 
            }
            else
            {
                PORTDbits.RD3 = 0;          // all seat are
            }
            if(data_buf[10] == 0x01)
            {
                PORTCbits.RC4=0;
            }
            else
            {
                PORTCbits.RC4=1;
            }
        }
        EEPROM_Write(0x22,data_buf[3]);
        TRIP_RESET();
        if((data_buf_2[0] == 0x67) && (data_buf_2[1] == 0xE0))
        {
            if((data_buf_2[4] == 0x01) || (data_buf_2[4] == 0x10) || (data_buf_2[4] == 0x11))
            {
                PORTAbits.RA2=1;   
            }
            else
            {
                PORTAbits.RA2=0;
            }
        }
        CC_Write(0x44,data_buf_2[4]);
        CC_TRIP_RESET();
    }
}
     

void System_init()
{
    GIE = 1;          //enable the global 
    PEIE = 1;         //enable peripheral
    RBPU=0;
}
void  CAN_init()
{
    TRISBbits.RB2 = 0;     //transmitting pin in MCU  Tx
    TRISBbits.RB3 = 1;
    TRISDbits.RD3 = 0;
    TRISEbits.RE2 = 0;
    TRISAbits.RA2 = 0;
    TRISCbits.RC4 = 0;
    PORTEbits.RE2 = 0;
    PORTAbits.RA2 = 0;
    PORTDbits.RD3 = 0;
    PORTCbits.RC4 = 0;
    
    RXB0IP = 1;
    RXB0IE = 1;//receiving pin in MCU Rx  
}
void set_mode()
{
    Set_baudrate();
}
void get_mode()
{
    CANCON = 0x0E;
}
void Set_baudrate()
{
    CANCON = 0x80;      //setting the configuration mode to set baud rate
    while(CANSTAT != 0x80);      //setting the status register
    BRGCON1 = 0XC1;        //r
    BRGCON2 = 0XAE;        
    BRGCON3 = 0X45;
    CIOCON = 0X20;
    CANCON = 0x08;
}
void mask()
{
    RXM0SIDH = 0x00;
    RXM0SIDL = 0x00;
}
void filter()
{
    RXF0SIDH = 0x00;
    RXF0SIDL = 0x00;
}
void __interrupt() ISR1()
{
     if(RX0IF)
     {
         RX0IF=0;
         can_read();
         can_read_2();
     }
}
void can_read()     //ococococococooccococococ
{
           get_mode();
           data_buf[0] = RXB0SIDH;  
           data_buf[1] = RXB0SIDL;
           data_buf[2] = RXB0DLC ;
           data_buf[3] = RXB0D0 ;
           data_buf[4] = RXB0D1 ;
           data_buf[5] = RXB0D2 ;
           data_buf[6] = RXB0D3 ;
           data_buf[7] = RXB0D4 ;
           data_buf[8] = RXB0D5 ;
           data_buf[9] = RXB0D6 ;
           data_buf[10] = RXB0D7 ;   
           RXB0CONbits.RXB0FUL = 0;             
}
void can_read_2()   // cccccccccccccccccccc
{
           get_mode();
           data_buf_2[0] = RXB0SIDH;  
           data_buf_2[1] = RXB0SIDL;
           data_buf_2[2] = RXB0DLC ;
           data_buf_2[3] = RXB0D0 ;
           data_buf_2[4] = RXB0D1 ;
           data_buf_2[5] = RXB0D2 ;
           data_buf_2[6] = RXB0D3 ;
           data_buf_2[7] = RXB0D4 ;
           data_buf_2[8] = RXB0D5 ;
           data_buf_2[9] = RXB0D6 ;
           data_buf_2[10] = RXB0D7 ;    
           RXB0CONbits.RXB0FUL = 0;  
}
void IC_TX()
{
     CANCON = 0x08;
     TXB0SIDH = 0x08;                   //Transmitting to  address 9F 
     TXB0SIDL = 0x00;
     TXB0DLC = 0X08;
     TXB0D0  = 0X00;
     TXB0D1  = 0X00;
     TXB0D2  = 0X00;
     TXB0D3  = 0X00;
     TXB0D4  = 0X00;
     TXB0D5  = 0X00;
     TXB0D6  = 0X00;
     TXB0D7  = 0X00;
     TXB0CON = 0X08;
     CANCON = 0x08;
     
}
void EEPROM_Write (int addr, char var1)
{
    
    /*Write Operation*/
    //var1 = data_buf[3];
    EEADR = addr;           /* Write address to the EEADR register*/
    EEDATA = data_buf[3];        /* Copy data to the EEDATA register for write */
    EECON1bits.EEPGD=0;         /* Access data EEPROM memory*/
    EECON1bits.CFGS=0;            /* Access flash program or data memory*/
    EECON1bits.WREN=1;          /* Allow write to the memory*/
    INTCONbits.GIE=0;  /* Disable global interrupt*/
    
    /* Below sequence in EECON2 Register is necessary 
    to write data to EEPROM memory*/
    EECON2=0x55;
    EECON2=0xaa;
    
    EECON1bits.WR=1;  /* Start writing data to EEPROM memory*/
    INTCONbits.GIE=1;  /* Enable interrupt*/
    
    while(PIR2bits.EEIF==0);/* Wait for write operation complete */
    PIR2bits.EEIF=0;       /* Reset EEIF for further write operation */   
}
void CC_Write(int addr, char var1)
{
    
    /*Write Operation*/
    //var1 = data_buf[3];
    EEADR = addr;           /* Write address to the EEADR register*/
    EEDATA = data_buf_2[4];    /* Copy data to the EEDATA register for write */
    EECON1bits.EEPGD=0;         /* Access data EEPROM memory*/
    EECON1bits.CFGS=0;            /* Access flash program or data memory*/
    EECON1bits.WREN=1;          /* Allow write to the memory*/
    INTCONbits.GIE=0;  /* Disable global interrupt*/
    
    /* Below sequence in EECON2 Register is necessary 
    to write data to EEPROM memory*/
    EECON2=0x55;
    EECON2=0xaa;
    
    EECON1bits.WR=1;  /* Start writing data to EEPROM memory*/
    INTCONbits.GIE=1;  /* Enable interrupt*/
    
    while(PIR2bits.EEIF==0);/* Wait for write operation complete */
    PIR2bits.EEIF=0;       /* Reset EEIF for further write operation */   
}
void EEPROM_RESET()
{
    
    /*Write Operation*/
    //var1 = data_buf[3];
    EEADR = 0x22;          /* Write address to the EEADR register*/
    EEDATA = 0; /* Copy data to the EEDATA register for write */
    EECON1bits.EEPGD=0;         /* Access data EEPROM memory*/
    EECON1bits.CFGS=0;            /* Access flash program or data memory*/
    EECON1bits.WREN=1;          /* Allow write to the memory*/
    INTCONbits.GIE=0;  /* Disable global interrupt*/
    
    /* Below sequence in EECON2 Register is necessary 
    to write data to EEPROM memory*/
    EECON2=0x55;
    EECON2=0xaa;
    
    EECON1bits.WR=1;  /* Start writing data to EEPROM memory*/
    INTCONbits.GIE=1;  /* Enable interrupt*/
    
    while(PIR2bits.EEIF==0);/* Wait for write operation complete */
    PIR2bits.EEIF=0;       /* Reset EEIF for further write operation */   
}
void CC_RESET()
{
    
    /*Write Operation*/
    //var1 = data_buf[3];
    EEADR = 0x44;          /* Write address to the EEADR register*/
    EEDATA = 0; /* Copy data to the EEDATA register for write */
    EECON1bits.EEPGD=0;         /* Access data EEPROM memory*/
    EECON1bits.CFGS=0;            /* Access flash program or data memory*/
    EECON1bits.WREN=1;          /* Allow write to the memory*/
    INTCONbits.GIE=0;  /* Disable global interrupt*/
    
    /* Below sequence in EECON2 Register is necessary 
    to write data to EEPROM memory*/
    EECON2=0x55;
    EECON2=0xaa;
    
    EECON1bits.WR=1;  /* Start writing data to EEPROM memory*/
    INTCONbits.GIE=1;  /* Enable interrupt*/
    
    while(PIR2bits.EEIF==0);/* Wait for write operation complete */
    PIR2bits.EEIF=0;       /* Reset EEIF for further write operation */   
}
void TRIP_RESET()
{
    TRISBbits.RB0=1;
    
    
    if(PORTBbits.RB0==0)
    {
        EEPROM_RESET();
        PORTCbits.RC4 = 1;
        __delay_ms(1000);
        PORTDbits.RD3 = 1;
        __delay_ms(1000);
    }
}
void CC_TRIP_RESET()
{
    TRISBbits.RB5=1;
    
    
    if(PORTBbits.RB5==0)
    {
        CC_RESET();
        PORTEbits.RE2 = 1;
        __delay_ms(1000);
        PORTAbits.RA2 = 0;
        __delay_ms(1000);
    }
}
